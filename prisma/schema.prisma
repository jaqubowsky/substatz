// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Provider {
  CREDENTIALS
  GOOGLE
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  BIANNUALLY
  ANNUALLY
}

enum Currency {
  USD
  EUR
  GBP
  JPY
  CAD
  AUD
  CHF
  CNY
  INR
  PLN
}

enum SubscriptionPlan {
  FREE
  PAID
}

model User {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  password         String?
  emailVerified    DateTime?        @map("email_verified")
  image            String?
  defaultCurrency  Currency         @default(USD)
  stripeCustomerId String?          @unique
  plan             SubscriptionPlan @default(FREE)
  subscriptions    Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Subscription {
  id          String                @id @default(cuid())
  userId      String
  name        String
  startDate   DateTime              @default(now())
  isCancelled Boolean               @default(false)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  history     SubscriptionHistory[]

  @@index([userId])
}

model SubscriptionHistory {
  id             String       @id @default(cuid())
  subscriptionId String

  price          Float
  currency       Currency
  billingCycle   BillingCycle
  category       String

  effectiveFrom  DateTime
  effectiveTo    DateTime?

  createdAt      DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([subscriptionId, effectiveFrom, effectiveTo])
}

model CurrencyRate {
  id        String   @id @default(cuid())
  currency  Currency
  rate      Float
  updatedAt DateTime @default(now())

  @@unique([currency])
  @@index([currency])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("password_reset_tokens")
}
